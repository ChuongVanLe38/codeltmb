/*
B√ÄI T·∫¨P: C·∫•u tr√∫c d·ªØ li·ªáu trong Dart
====================================
B√†i 1: List
 
C√≥ bao nhi√™u c√°ch ƒë·ªÉ khai b√°o m·ªôt List trong ƒëo·∫°n code? Li·ªát k√™ v√† gi·∫£i th√≠ch t·ª´ng c√°ch.

Cho List ['A', 'B', 'C']. Vi·∫øt code ƒë·ªÉ:
 
Th√™m ph·∫ßn t·ª≠ 'D' v√†o cu·ªëi List
Ch√®n ph·∫ßn t·ª≠ 'X' v√†o v·ªã tr√≠ th·ª© 1
X√≥a ph·∫ßn t·ª≠ 'B'
In ra ƒë·ªô d√†i c·ªßa List
 
ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£ g√¨?
 
dartCopyvar list = [1, 2, 3, 4, 5];
list.removeWhere((e) => e % 2 == 0);
print(list);
 
Gi·∫£i th√≠ch s·ª± kh√°c nhau gi·ªØa c√°c ph∆∞∆°ng th·ª©c:
 
remove() v√† removeAt()
add() v√† insert()
addAll() v√† insertAll()
 
 */
//B√†i 1 
import 'dart:ffi';

void bai1(){

//C√≥ 4 c√°ch: 
  List<String> list1 = ['A', 'B', 'C']; // Tr·ª±c ti·∫øp
  var list2 = [1,2,3]; // s·ª≠ d·ª•ng var
  List<String> list3 = []; // list r·ªóng
  var list4 = List<int>.filled(3,0); // List c√≥ k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh [0,0,0]

  list1.add('D'); //Th√™m ph·∫ßn t·ª≠ 'D' v√†o cu·ªëi List
  print(list1);
  list1.insert(1,'X');//Ch√®n ph·∫ßn t·ª≠ 'X' v√†o v·ªã tr√≠ th·ª© 1
  print(list1);
  list1.remove('B');//X√≥a ph·∫ßn t·ª≠ 'B'
  print(list1);
  print(list1.length);// In ra ƒë·ªô d√†i c·ªßa List

  //ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£ g√¨? [1,3,5];
  

  //remove() X√≥a ph·∫ßn t·ª≠ c√≥ gi√° tr·ªã ch·ªâ ƒë·ªãnh; removeAt() X√≥a ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ ch·ªâ ƒë·ªãnh
  //add() Th√™m 1 ph·∫ßn t·ª≠ ch·ªâ ƒë·ªãnh v√† insert() Ch√®n 1 ph·∫ßn t·ª≠ ch·ªâ ƒë·ªãnh
  //addAll() Th√™m nhi·ªÅu ph·∫ßn t·ª≠ ch·ªâ ƒë·ªãnh v√† insertAll() Ch√®n nhi·ªÅu ph·∫ßn t·ª≠ ch·ªâ ƒë·ªãnh
}
/*
====================================
B√†i 2: Set
 
Set kh√°c List ·ªü nh·ªØng ƒëi·ªÉm n√†o? N√™u √≠t nh·∫•t 3 ƒëi·ªÉm kh√°c bi·ªát.
Cho hai Set:
 
dartCopyvar set1 = {1, 2, 3};
var set2 = {3, 4, 5};
T√≠nh k·∫øt qu·∫£ c·ªßa:
 
Union (h·ª£p)
Intersection (giao)
Difference (hi·ªáu) c·ªßa set1 v·ªõi set2
 
 
ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£ g√¨?
 
dartCopyvar mySet = Set.from([1, 2, 2, 3, 3, 4]);
print(mySet.length);
*/
//B√†i 2 
 void bai2(){

  // list
  // - List l√† t·∫≠p h·ª£p c√°c ph·∫ßn t·ª≠ c√≥ th·ª© t·ª± v√† c√≥ th·ªÉ tr√πng l·∫∑p
  // - C√°c ph·∫ßn t·ª≠ ƒë∆∞·ª£c truy c·∫≠p b·∫±ng ch·ªâ s·ªë (index) t·ª´ 0
  // - K√≠ch th∆∞·ªõc c√≥ th·ªÉ thay ƒë·ªïi ƒë∆∞·ª£c

  // Set
  // - Set l√† t·∫≠p h·ª£p c√°c ph·∫ßn t·ª≠ kh√¥ng tr√πng l·∫∑p
  // - Kh√¥ng c√≥ th·ª© t·ª± x√°c ƒë·ªãnh
  // - M·ªói ph·∫ßn t·ª≠ ch·ªâ xu·∫•t hi·ªán m·ªôt l·∫ßn

  Set<int> set1 = {1, 2, 3};
  var set2 = {3, 4, 5};

  var union = set1.union(set2);        // H·ª£p
  print(union);
  var intersection = set1.intersection(set2); // Giao
  print(intersection);
  var difference = set1.difference(set2);    // Hi·ªáu
  print(difference);

  //ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£: [1,3,5];
  

  //remove() X√≥a ph·∫ßn t·ª≠ c√≥ gi√° tr·ªã ch·ªâ ƒë·ªãnh; removeAt() X√≥a ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ ch·ªâ ƒë·ªãnh
  //add() Th√™m 1 ph·∫ßn t·ª≠ ch·ªâ ƒë·ªãnh v√† insert() Ch√®n 1 ph·∫ßn t·ª≠ ch·ªâ ƒë·ªãnh
  //addAll() Th√™m nhi·ªÅu ph·∫ßn t·ª≠ ch·ªâ ƒë·ªãnh v√† insertAll() Ch√®n nhi·ªÅu ph·∫ßn t·ª≠ ch·ªâ ƒë·ªãnh
}
/*
====================================
B√†i 3: Map
 
Vi·∫øt code ƒë·ªÉ th·ª±c hi·ªán c√°c y√™u c·∫ßu sau v·ªõi Map:
 
dartCopyMap<String, dynamic> user = {
  'name': 'Nam',
  'age': 20,
  'isStudent': true
};
 
Th√™m email: 'nam@gmail.com'
C·∫≠p nh·∫≠t age th√†nh 21
X√≥a tr∆∞·ªùng isStudent
Ki·ªÉm tra xem Map c√≥ ch·ª©a key 'phone' kh√¥ng
 
 
So s√°nh hai c√°ch truy c·∫≠p gi√° tr·ªã trong Map:
 
dartCopyuser['phone']
user['phone'] ?? 'Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i'
 
Vi·∫øt m·ªôt h√†m nh·∫≠n v√†o m·ªôt Map v√† in ra t·∫•t c·∫£ c√°c c·∫∑p key-value, m·ªói c·∫∑p tr√™n m·ªôt d√≤ng.
 
 */

void bai3() {
  Map<String, dynamic> user = {
    'name': 'Nam',
    'age': 20,
    'isStudent': true
  };

  user['email'] = 'nam@gmail.com';
  
  user['age'] = 21;
  
  user.remove('isStudent');
  
  bool hasPhone = user.containsKey('phone');
  print('Map c√≥ ch·ª©a key "phone": $hasPhone');

  print('C√°ch 1: ${user['phone']}');
  print('C√°ch 2: ${user['phone'] ?? 'Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i'}');

  // G·ªçi h√†m in ra c√°c c·∫∑p key-value
  printKeyValuePairs(user);
}

// H√†m nh·∫≠n v√†o m·ªôt Map v√† in ra t·∫•t c·∫£ c√°c c·∫∑p key-value
void printKeyValuePairs(Map<String, dynamic> map) {
  map.forEach((key, value) {
    print('$key: $value');
  });
}

/* 
====================================
Ph·∫ßn 4: Runes
 
Runes ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨? Cho v√≠ d·ª• c·ª• th·ªÉ.
Vi·∫øt code ƒë·ªÉ:
 
 
T·∫°o m·ªôt Runes ch·ª©a k√Ω t·ª± emoji c∆∞·ªùi üòÄ
Chuy·ªÉn ƒë·ªïi Runes ƒë√≥ th√†nh String
In ra s·ªë l∆∞·ª£ng ƒëi·ªÉm m√£ c·ªßa Runes
 
*/
void bai4 () {
  Runes runes = Runes('\u{1f600}'); // K√Ω t·ª± m·∫∑t c∆∞·ªùi
  String emojiStr = String.fromCharCodes(runes); // Chuy·ªÉn ƒë·ªïi Runes th√†nh String
  print(emojiStr); // In emoji c∆∞·ªùi
  print('S·ªë l∆∞·ª£ng ƒëi·ªÉm m√£ c·ªßa runes: ${runes.length}');
}

void main(){

}